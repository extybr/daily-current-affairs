
#############################

Вот пример команды sed, которая удаляет каждые три строки после каждых трёх строк в файле:
    sed '1~6d;2~6d;3~6d' input.txt > output.txt
Объяснение:
    1~6d: Указывает, что начиная с первой строки, каждая шестая строка должна быть удалена. Это соответствует началу каждой тройки строк, которую нужно пропустить.
    2~6d: Начиная со второй строки, удаляется каждая шестая строка (вторая в группе из трёх).
    3~6d: Аналогично, начиная с третьей строки, каждая шестая строка удаляется.
Результат:
    Первые три строки остаются.
    Следующие три строки удаляются.
    Повторяется по всему файлу.
Если хотите применить это сразу к файлу (изменяя его на месте), используйте флаг -i:
    sed -i '1~6d;2~6d;3~6d' input.txt
    
#############################

Вы сказали: а теперь тоже самое, но начиная с первой строки: первую строку оставляем, следующие три удаляем и так далее
Для выполнения задачи, где нужно оставить первую строку, удалить следующие три строки и продолжать в этом порядке: 
    sed '2,${N;N;N;d}' input.txt > output.txt
Объяснение:
    2,${...}: Указывает, что изменения применяются начиная со второй строки до конца файла ($).
    N;N;N;: Команда N объединяет текущую строку с двумя последующими, создавая блок из трёх строк.
    d: Удаляет этот блок из трёх строк.
В результате:
    Первая строка остаётся.
    Следующие три строки удаляются.
    Этот процесс повторяется до конца файла.
Если нужно применить изменения на месте (изменить исходный файл), используйте флаг -i:
    sed -i '2,${N;N;N;d}' input.txt

#############################

Вы сказали: подправить, пример строк:
    live.vkvideo.ru\\\/vmetale\\\"
    live.vkvideo.ru\\\/vmetale\"
    live.vkvideo.ru\\\/deepplomat_music\\\"
    live.vkvideo.ru\\\/deepplomat_music\"
    live.vkvideo.ru\\\/dj_ewgen_live\\\"
    live.vkvideo.ru\\\/dj_ewgen_live\"
Если вы хотите обработать эти строки, чтобы, например, удалить лишние символы экранирования (\\\) и оставить только валидные пути, можно использовать sed. Вот пример команды, которая убирает лишние обратные слэши (\) перед косыми чертами (/) и кавычками ("):
    sed 's|\\\\\\|\\|g' input.txt > output.txt
Объяснение команды:
    s|\\\\\\|\\|g: Это выражение выполняет замену.
        \\\\\\: Совпадает с тремя последовательными обратными слэшами (\\\), которые используются в вашем файле.
        \\: Заменяет их на один обратный слэш (\).
        g: Флаг глобальной замены, чтобы обработать каждую строку полностью.
Пример обработки: Исходная строка:
    live.vkvideo.ru\\\/vmetale\\\"
Результат:
    live.vkvideo.ru\/vmetale\"

#############################

Вы сказали: оставить 1, 5 и 9 строки

Для того чтобы оставить только 1, 5 и 9 строки из файла, можно использовать следующую команду sed:
    sed -n '1p;5p;9p' input.txt > output.txt
Объяснение:
    -n: Отключает вывод всех строк, кроме тех, которые явно указаны.
    1p;5p;9p: Указывает команды для вывода только 1, 5 и 9 строк:
        1p: Распечатать первую строку.
        5p: Распечатать пятую строку.
        9p: Распечатать девятую строку.
В результате только указанные строки будут записаны в файл output.txt.
Если нужно изменить файл на месте (без создания нового), добавьте флаг -i:
    sed -n -i '1p;5p;9p' input.txt

#############################

Вы сказали: начиная с первой, оставить каждую четвертую строку, остальные удалять

Чтобы оставить каждую четвертую строку, начиная с первой, и удалить остальные, используйте следующую команду sed:
    sed -n '1~4p' input.txt > output.txt
Объяснение:
    -n: Отключает вывод всех строк, кроме тех, которые явно указаны.
    1~4p: Указывает, что начиная с первой строки (1), нужно напечатать каждую четвертую строку (~4).

#############################

Вы сказали: а теперь на bash удалить последний символ в строке

Чтобы удалить последний символ в каждой строке файла на Bash, можно использовать команду sed:
    sed 's/.$//' input.txt > output.txt
Объяснение:
    s/.$//: Это команда замены.
        .$: Означает "любой последний символ" (. — любой символ, $ — конец строки).
        //: Заменяет этот символ на пустую строку, effectively удаляя его.
    input.txt > output.txt: Читает строки из файла input.txt и записывает результат в output.txt.
Если нужно изменить файл на месте (без создания нового файла), используйте флаг -i:
    sed -i 's/.$//' input.txt
Пример:  Входной файл (input.txt):
    line1
    line2
    line3
Результат (output.txt):
    line
    line
    line

#############################

Вы сказали: а теперь на bash удалить два последних символа в строке

Чтобы удалить последние два символа в каждой строке файла на Bash, используйте следующую команду sed:
    sed 's/..$//' input.txt > output.txt
Объяснение:
    s/..$//:
        ..$ означает "последние два символа в строке" (каждая точка . соответствует любому символу, а $ указывает на конец строки).
        // заменяет эти символы на пустую строку, effectively удаляя их.
    input.txt > output.txt: Читает строки из файла input.txt и записывает результат в output.txt.
Если хотите изменить файл на месте, используйте флаг -i:
    sed -i 's/..$//' input.txt
Пример: Входной файл (input.txt):
    line12
    line34
    line56
Результат (output.txt):
    line1
    line3
    line5

#############################

Вы сказали: а как оставить только первые три символа в строке

Чтобы оставить только первые три символа в каждой строке файла, используйте следующую команду sed:
    sed 's/^\(.\{3\}\).*/\1/' input.txt > output.txt
Объяснение:
    s/^\(.\{3\}\).*/\1/:
        ^\(.\{3\}\): Находит первые три символа в строке (где .\{3\} означает "ровно три любых символа").
        .*: Соответствует всем оставшимся символам после первых трёх.
        \1: Заменяет всю строку на первые три символа, которые захвачены в группе \(.\{3\}\).
    input.txt > output.txt: Читает строки из файла input.txt и записывает результат в output.txt.
Если хотите изменить файл на месте, используйте флаг -i:
    sed -i 's/^\(.\{3\}\).*/\1/' input.txt
Пример: Входной файл (input.txt):
    abcdef
    123456
    hello
Результат (output.txt):
    abc
    123
    hel

#############################

Вы сказали: а если только первое слово

Чтобы оставить только первое слово в каждой строке (до первого пробела или табуляции), можно использовать sed:
    sed 's/^\([^ \t]*\).*/\1/' input.txt > output.txt
Объяснение:
    s/^\([^ \t]*\).*/\1/:
        ^: Начало строки.
        \([^ \t]*\): Захватывает первую группу символов, которые идут до первого пробела ( ) или табуляции (\t). Здесь [^ \t]* означает "все символы, кроме пробела и табуляции".
        .*: Соответствует остальной части строки после первого слова.
        \1: Заменяет всю строку на первое захваченное слово (первая группа).
    input.txt > output.txt: Читает строки из input.txt и сохраняет результат в output.txt.
Если хотите изменить файл на месте, используйте флаг -i:
    sed -i 's/^\([^ \t]*\).*/\1/' input.txt

Пример: Входной файл (input.txt):
    hello world example
    12345 test data
    one more line
Результат (output.txt):
    hello
    12345
    one

#############################

Вы сказали: как оставить только два первых слова, остальные удалить

Чтобы оставить только первые два слова в каждой строке и удалить остальные, используйте следующую команду sed:
    sed 's/^\(\([^ \t]*[ \t]\)\{2\}\).*/\1/' input.txt > output.txt
Объяснение:
    ^\(\([^ \t]*[ \t]\)\{2\}\):
        ^: Начало строки.
        \([^ \t]*[ \t]\): Находит одно слово ([^ \t]* — любые символы, кроме пробела или табуляции), за которым следует пробел или табуляция ([ \t]).
        \{2\}: Указывает, что нужно найти два таких слова подряд.
        \(...\): Захватывает первые два слова в группе.
    .*: Соответствует всем остальным символам в строке.
    \1: Заменяет строку только на первые два слова, которые были захвачены.
    input.txt > output.txt: Сохраняет результат в новый файл.
Если нужно изменить файл на месте, добавьте флаг -i:
    sed -i 's/^\(\([^ \t]*[ \t]\)\{2\}\).*/\1/' input.txt
Пример: Входной файл (input.txt):
    hello world example text
    12345 test data more
    one more line here
Результат (output.txt):
    hello world
    12345 test
    one more

#############################

Вы сказали: sed  обрезать строку:
    title" href="/video-25380626_456283287 <view-source:https://vkvideo.ru/video-25380626_456283287
до слова source

Чтобы с помощью sed обрезать строку и оставить только часть до слова source, используйте следующий шаблон:
    sed 's/source.*//' input.txt > output.txt
Объяснение:
    s/source.*//:
        source.*: Находит слово source и всё, что следует за ним (до конца строки), где .* — соответствует любым символам.
        //: Заменяет найденное на пустую строку, effectively удаляя.
Пример: Входной файл (input.txt):
    title" href="/video-25380626_456283287 <view-source:https://vkvideo.ru/video-25380626_456283287
    title" href="/video-123456_7891011 <view-source:https://vkvideo.ru/video-123456_7891011
Результат (output.txt):
    title" href="/video-25380626_456283287 <view-
    title" href="/video-123456_7891011 <view-
Если вы хотите изменить файл на месте, используйте флаг -i:
    sed -i 's/source.*//' input.txt

#############################

Вы сказали: обрезать все что до слова source

Чтобы обрезать всё, что находится до слова source (включительно), и оставить только остальную часть строки, можно использовать следующую команду sed:
    sed 's/.*source//' input.txt > output.txt
Объяснение:
    .*source:
        .*: Соответствует всем символам до слова source.
        source: Находит слово source в строке.
    //: Заменяет всё найденное (включая слово source) на пустую строку.
Пример: Входной файл (input.txt):
    title" href="/video-25380626_456283287 <view-source:https://vkvideo.ru/video-25380626_456283287
    title" href="/video-123456_7891011 <view-source:https://vkvideo.ru/video-123456_7891011
Результат (output.txt):
    :https://vkvideo.ru/video-25380626_456283287
    :https://vkvideo.ru/video-123456_7891011
Если вы хотите изменить файл на месте, используйте флаг -i:
    sed -i 's/.*source//' input.txt

#############################

Вы сказали: строку вывода, а не файл

Если хотите обрезать строку в стандартном выводе, а не работать с файлами, используйте ту же команду sed, но без перенаправления:
    echo 'title" href="/video-25380626_456283287 <view-source:https://vkvideo.ru/video-25380626_456283287' | sed 's/.*source//'
Пример: Входная строка:
    title" href="/video-25380626_456283287 <view-source:https://vkvideo.ru/video-25380626_456283287
Вывод:
    :https://vkvideo.ru/video-25380626_456283287
Таким образом, sed обработает строку и выведет результат сразу в терминале. Вы можете заменить входную строку в echo на любую другую.

#############################

Вы сказали: а как удалить дубликаты строк с помощью sed ?

Удаление дубликатов строк с помощью sed напрямую невозможно, так как sed обрабатывает строки последовательно и не хранит информацию о предыдущих строках. Однако, можно использовать команду awk или sort, которые лучше подходят для этого.
Если хотите попробовать с sed, вот пример (хотя это подходит только для последовательных дубликатов):
    sed '$!N; /^\(.*\)\n\1$/!P; D' input.txt > output.txt
Объяснение:
    $!N: Считывает следующую строку и объединяет её с текущей.
    /^\(.*\)\n\1$/: Проверяет, являются ли текущая строка и следующая одинаковыми.
        \(.*\): Захватывает всю строку.
        \n: Переход на следующую строку.
        \1: Сравнивает строку с предыдущей.
    !P: Печатает строку только если она не является дубликатом.
    D: Удаляет текущую строку и переходит к следующей итерации.
Этот метод работает только для последовательных дубликатов. Если строки не отсортированы, нужно сначала отсортировать их:
    sort input.txt | sed '$!N; /^\(.*\)\n\1$/!P; D' > output.txt
Рекомендуемый подход (лучше, чем sed):
Используйте sort с uniq:
    sort input.txt | uniq > output.txt
Или если нужно сразу обновить файл:
    sort input.txt | uniq > temp.txt && mv temp.txt input.txt

#############################

Вы сказали: sed удалить первые 5 строк

Чтобы удалить первые 5 строк из файла с помощью sed, используйте следующую команду:
    sed '1,5d' input.txt > output.txt
Объяснение:
    1,5d: Указывает диапазон строк с 1 по 5 и удаляет их (d — команда удаления).
    input.txt > output.txt: Читает строки из файла input.txt, удаляет первые 5 строк и записывает результат в output.txt.
Если вы хотите вывести результат в стандартный вывод (терминал), то просто:
    sed '1,5d' input.txt
Если нужно изменить файл на месте, используйте флаг -i:
    sed -i '1,5d' input.txt

#############################

Вы сказали: sed вывод строк начиная с пятой и до конца

Чтобы с помощью sed вывести строки, начиная с пятой и до конца, используйте следующую команду:
    sed -n '5,$p' input.txt
Объяснение:
    -n: Отключает автоматический вывод всех строк.
    5,$p:
        5, означает начать с пятой строки.
        $ указывает на конец файла.
        p печатает строки в указанном диапазоне.
Примеры: Входной файл (input.txt):
    line1
    line2
    line3
    line4
    line5
    line6
    line7
Команда:
    sed -n '5,$p' input.txt
Вывод:
    line5
    line6
    line7
Если хотите изменить файл на месте, используйте:
    sed -i '1,4d' input.txt

#############################

Вы сказали: Подправить ошибку на последней строке, вывод текста должен быть в цикле с 6-ой строки
    while read line; do
      command ...
    done < sed -n '6,$p' text.txt

Ваш текущий код содержит ошибку, поскольку sed нельзя использовать непосредственно как источник для while read. Чтобы исправить это, нужно передать результат работы sed в цикл через командную подстановку. Вот исправленный код:
    while read line; do
      command ...
    done < <(sed -n '6,$p' text.txt)
Объяснение:
    <(...): Это командная подстановка, которая позволяет передать результат выполнения команды (sed -n '6,$p' text.txt) как входной поток.
    sed -n '6,$p' text.txt: Выводит строки с 6-й до конца файла.
    while read line; do ...: Обрабатывает каждую строку результата команды sed.
Полный пример:
Если вы хотите, например, просто напечатать строки с 6-й до конца файла, это можно сделать так:
    while read line; do
      echo "$line"
    done < <(sed -n '6,$p' text.txt)
Пример входного файла (text.txt):
    line1
    line2
    line3
    line4
    line5
    line6
    line7
    line8
Вывод:
    line6
    line7
    line8

#############################

Вы сказали: sed удалить из строки 'aac/64/480?token=eyJ0eXAiOiJK!?V1Q.iLCJhbGciOiJIUzI1NiJ9' все символы начиная с 'token' и до конца строки

Чтобы удалить из строки все символы начиная с 'token' и до конца строки, используйте команду sed:
    echo "aac/64/480?token=eyJ0eXAiOiJK!?V1Q.iLCJhbGciOiJIUzI1NiJ9" | sed 's/token.*//'
Объяснение:
    s/token.*//:
        token: Находит начало ключевого слова token.
        .*: Соответствует всем символам, которые идут после token, до конца строки.
        //: Заменяет найденный текст (от token до конца строки) на пустую строку.
Пример:
Команда:
    echo "aac/64/480?token=eyJ0eXAiOiJK!?V1Q.iLCJhbGciOiJIUzI1NiJ9" | sed 's/token.*//'
Вывод:
    aac/64/480?
Если хотите удалить из файла, примените это к содержимому файла:
    sed 's/token.*//' input.txt > output.txt
Для изменения файла на месте:
    sed -i 's/token.*//' input.txt

#############################

Вы сказали: sed склеить строки попарно, первую со второй, третью с четвертой и так далее

Чтобы склеить строки попарно с помощью sed, используйте следующую команду:
    sed 'N;s/\n/ /' input.txt
Объяснение:
    N: Считывает следующую строку и объединяет её с текущей.
    s/\n/ /: Заменяет символ новой строки (\n) пробелом, склеивая строки.
Пример:
Входной файл (input.txt):
    line1
    line2
    line3
    line4
    line5
    line6
Команда:
    sed 'N;s/\n/ /' input.txt
Вывод:
    line1 line2
    line3 line4
    line5 line6
Если хотите сохранить результат в файл, перенаправьте вывод:
    sed 'N;s/\n/ /' input.txt > output.txt
Если хотите изменить файл на месте:
    sed -i 'N;s/\n/ /' input.txt

#############################

Чтобы после каждой второй строки в тексте добавить пустую строку, можно использовать sed. Вот команда:
    sed 'n;G' input.txt > output.txt
Объяснение:
    n — пропускает одну строку (читается следующая строка, но не выводится).
    G — добавляет пустую строку после текущей строки.
    input.txt — входной файл с текстом.
    output.txt — файл, в который будет записан результат. Если хотите изменить файл на месте, используйте опцию -i (но будьте осторожны):

#############################

Чтобы удалить все пробелы в строке до первого печатного символа с помощью Bash, можно использовать команду sed или awk. Вот несколько примеров:
1. С использованием sed:
    echo "     Пример строки с пробелами" | sed 's/^[[:space:]]*//'
2. С использованием awk:
    echo "     Пример строки с пробелами" | awk '{$1=$1; print}'
3. С использованием параметрической замены в Bash. Если строка хранится в переменной:
    str="     Пример строки с пробелами"
    str="${str#"${str%%[![:space:]]*}"}"
    echo "$str"
4. С использованием tr:
    echo "     Пример   строки   с           пробелами" | tr -s ' '
Все эти команды удалят пробелы до первого печатного символа. Выберите тот способ, который вам удобнее.

#############################

Добавить текст до заданной строки.
Добавить текст в файл text.txt перед 4-ой строкой:
    sed -i '4i\<table border=1>' text.txt
Добавить текст после заданной строки.
Добавить текст в файл text.txt после 10-ой строки:
    sed -i '10a\</table>' text.txt

#############################

У меня есть файл и я удаляю из него строки, где есть "cdn.ngenix.net", а также строку выше :
sed '/cdn\.ngenix\.net/{N;d;}' playlist.m3u

#############################

